---
# yamllint disable rule:line-length
generators:
  go: barney.ci/golang%generator

images:

  internal/bootstrap/iso-extraction-floor:
    entry:
      mutables:
        - /var/work
    units:
      - image: barney.ci/alpine%pkg/alpine-base
      - image: barney.ci/alpine%pkg/gettext
      - image: barney.ci/alpine%pkg/wget
      - image: barney.ci/alpine%network
      - image: barney.ci/alpine%apk-finalizers
      - build: |
          mkdir -p /dest/var/work

  internal/bootstrap/src-deps:
    no-create-mountpoints: true
    units:
      - build: |
          cp -a bootstrap/* /dest/
          cp -a pki/rpmkeys/alma9-b86b3716-gpg-pubkey.pem /dest/
          cp -a pki/rpmkeys/epel9-3228467c-gpg-pubkey.pem /dest/
          rm -f /dest/README*

  internal/bootstrap:
    description: |
      Minimal bootstrapping environment used to bootstrap almalinux.

      This needs to be based off of an rpm-based distro,
      we're using CentOS-stream as a suitable tarball and CHECKSUM file
      is readily available on the mirror. This is seldom changed and
      any change here will update all eext snapshots.

      We wipe out the dnf/yum repo configuration in the tarball,
      and setup our own curated set of frozen almalinux repos.

      We also include an install-rpms script which is used to bootstrap
      the almalinux image.
    entry:
      share-net: true
      mounts:
        - source: /etc/resolv.conf
          target: /etc/resolv.conf
          options: ro,bind
      mutables:
        - /var/cache
        - /var/lib/dnf
    units:
      - floor: .%internal/bootstrap/iso-extraction-floor
        entry:
          env:
            DNF_HOST: ${eext-dnf-host.url:-https://artifactory.infra.corp.arista.io/artifactory}
            BOOTSTRAP_PATH: eext-sources/bootstrap/CentOS-Stream
            BOOTSTRAP_FILE: CentOS-Stream-Container-Base-9-20240715.0
            BOOTSTRAP_EXTENSION: tar.xz
            DNF_DISTRO_REPO: eext-alma-vault
            DNF_DISTRO_REPO_VERSION: "9.3"
            DNF_EPEL_REPO: eext-snapshots-local/epel9
            DNF_EPEL_REPO_SNAPSHOT_VERSION: v20240127-1
            DNF_EPEL_REPO_DISTRO_VERSION: "9"
        sources: []
        mappings:
          /src/bootstrap: .%internal/bootstrap/src-deps
        build: |
          # URL of tarball with OS image
          export ARCH=$(uname -m)
          bootstrap_filename="${BOOTSTRAP_FILE}.${ARCH}.${BOOTSTRAP_EXTENSION}"
          bootstrap_url="${DNF_HOST}/${BOOTSTRAP_PATH}/${bootstrap_filename}"

          # Download the tarball into the mutable working dir
          cd /var/work
          wget ${bootstrap_url}

          # Validate downloaded tarball
          grep "${bootstrap_filename}" /src/bootstrap/CHECKSUM | sha256sum -wc

          # Extract tarball and setup rootfs
          # This is a nested tarball, the real rootfs is in layer.tar
          # Extract the firt level tarball inside the extr subdirectory
          # within the working directory and and then extract the
          # second level layer.tar directly to /dest
          mkdir extr
          tar --strip-components=1 -C ./extr -xf ./${bootstrap_filename}
          tar -xf ./extr/layer.tar -C /dest

          # Now modify the extracted file system to remove unwanted
          # stuff and add extra stuff.

          # Remove any pre-configured yum repos
          rm /dest/etc/yum.repos.d/*
          # Setup install-rpms shell script
          mkdir -p /dest/usr/bin
          chmod 555 /dest/usr/bin
          cp -a /src/bootstrap/install-rpms /dest/usr/bin/
          chmod 0755 /dest/usr/bin/install-rpms
          # Setup gpg keys
          mkdir -p /dest/usr/share/distribution-gpg-keys
          chmod 555 /dest/usr/share/distribution-gpg-keys
          cp -a /src/bootstrap/*.pem /dest/usr/share/distribution-gpg-keys/
          # Setup curated frozen dnf repo list for build reproducibility
          envsubst < /src/bootstrap/eext-repos-build.repo.template > /dest/etc/yum.repos.d/eext-repos-build.repo

  base-image:
    units:
      - floor: .%internal/bootstrap
        sources: []
        build: install-rpms autoconf automake coreutils git rpm rpmdevtools rpm-build make mock python3-devel quilt

  go-binaries:
    description: |
      This image is a copy of .%go/static, but with /usr/bin
      permissions changed to 0555, so that it can combine properly
      with redhat-style images.
    units:
      - mappings:
          /src/static: .%go/static
        build: |
          mkdir -p /dest/usr
          cp -a /src/static/usr/bin /dest/usr/bin
          chmod 555 /dest/usr/bin

  eext:
    units:
      - image: .%base-image
      - image: .%go-binaries
      - build: |
          mkdir -p $DESTDIR/usr/share/eext
          cp -a ./configfiles/* $DESTDIR/usr/share/eext
          mkdir -p $DESTDIR/etc/pki/eext
          cp -a ./pki/* $DESTDIR/etc/pki/eext
          mkdir -p $DESTDIR/etc
          touch $DESTDIR/etc/resolv.conf
    entry:
      mutables: &eext-mutables
        - /var/eext
        - /var/cache
        - /var/lib/mock
        - /var/lib/rpm
        - /var/tmp
      mounts:
        - source: /etc/resolv.conf
          target: /etc/resolv.conf
          options: ro,bind
      # We need access to artifactory.infra.corp.arista.io
      # to make mock work
      share-net: true

  eext-testfloor:
    units:
      - image: .%go/modules
      - build: |
          mkdir -p /dest/var/cache/go
          mkdir -p /dest/var/ext
      - floor: .%internal/bootstrap
        sources: []
        build: |
          install-rpms autoconf automake coreutils golang git rpm rpmdevtools rpm-build make mock python3-devel quilt
          touch $DESTDIR/etc/resolv.conf
    entry:
      env:
        GOCACHE: /tmp/gocache
        GOMODCACHE: /go/pkg/mod
      mutables: *eext-mutables
      mounts:
        - source: /etc/resolv.conf
          target: /etc/resolv.conf
          options: ro,bind
      # We need access to artifactory.infra.corp.arista.io
      # to make mock work
      share-net: true

  test/eext:
    units:
      - floor: .%eext-testfloor
        build: |
          go test code.arista.io/eos/tools/eext/dnfconfig
          go test code.arista.io/eos/tools/eext/srcconfig
          go test code.arista.io/eos/tools/eext/manifest
          go test code.arista.io/eos/tools/eext/impl
          go test code.arista.io/eos/tools/eext/cmd
          go test code.arista.io/eos/tools/eext/cmd -tags privileged
          go vet code.arista.io/eos/tools/eext/...
          test -z "$(gofmt -l .)"

  # go test runs on separate test-floor
  # so validate build here
  test/eext-build:
    units:
      - image: .%eext
