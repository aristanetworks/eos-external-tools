---
# yamllint disable rule:line-length
generators:
  go: barney.ci/golang%generator

images:

  internal/bootstrap/extract/sources:
    units:
      - files:
          - from: .
            paths:
              - 'bootstrap/extract/extract.bash'
              - 'bootstrap/extract/CHECKSUM'

  internal/bootstrap/extract/floor:
    entry:
      mutables:
        - /var/work
    units:
      - image: barney.ci/alpine%pkg/alpine-base
      - image: barney.ci/alpine%pkg/bash
      - image: barney.ci/alpine%pkg/wget
      - image: barney.ci/alpine%network
      - image: barney.ci/alpine%apk-finalizers
      - image: .%internal/bootstrap/extract/sources

  internal/bootstrap/extract:
    no-create-mountpoints: true
    description: |
      Minimal bootstrapping environment used to bootstrap almalinux.

      This needs to be based off of an rpm-based distro,
      we're using CentOS-stream as a suitable tarball and CHECKSUM file
      is readily available on the mirror. This is seldom changed and
      any change here will update all eext snapshots.

      We wipe out the dnf/yum repo configuration in the tarball.
    entry:
      share-net: true
      mounts:
        - source: /etc/resolv.conf
          target: /etc/resolv.conf
          options: ro,bind
      mutables:
        - /var/cache
        - /var/lib/dnf
    units:
      - floor: .%internal/bootstrap/extract/floor
        entry:
          env:
            DNF_HOST: ${eext-dnf-host.url:-https://artifactory.infra.corp.arista.io/artifactory}
        sources: []
        build: |
          cd /var/work
          bash /bootstrap/extract/extract.bash /bootstrap/extract/CHECKSUM
          touch $DESTDIR/etc/resolv.conf

  internal/bootstrap/eext-repos/sources:
    units:
      - files:
          - from: .
            match:
              - 'bootstrap/eext-repos/*'
              - 'pki/rpmkeys/alma9-b86b3716-gpg-pubkey.pem'
              - 'pki/rpmkeys/epel9-3228467c-gpg-pubkey.pem'

  internal/bootstrap/eext-repos/floor:
    description: |
      Alpine floor with the eext-repos src directory mapped in.
      gettext provides envsubst used by generate-repo-file.bash called from generate.bash
      rpm-dev provides rpmbuild used by generate.bash.
    entry:
      mutables:
        - /var/work
        - /var/tmp
    units:
      - image: barney.ci/alpine%pkg/alpine-base
      - image: barney.ci/alpine%pkg/bash
      - image: barney.ci/alpine%pkg/gettext
      - image: barney.ci/alpine%pkg/rpm-dev
      - image: barney.ci/alpine%apk-finalizers
      - image: .%internal/bootstrap/eext-repos/sources
      - sources: []
        build: |
          mkdir -p /dest/var/work

  internal/bootstrap/eext-repos:
    no-create-mountpoints: true
    description: |
      Setup curated frozen dnf repo list for build reproducibility.
      There're two files, eext-repo-build.repo and eext-repo-devel.repo. These files are
      installed in /eext-repos directory.
      We also install the eext-repo-build.repo in /etc/yum.repos.d to be used for base image
      bootstrap.

      We also build an rpm each with the contents being the repo file,
      and instructions to install at /etc/yum.repos.d.
      The RPMs are named eext-repos-build and eext-repos-devel with approiate architecture
      and .rpm extensions. They are installed in /RPMS.
    units:
      - floor: .%internal/bootstrap/eext-repos/floor
        entry:
          env:
            DNF_HOST: ${eext-dnf-host.url:-https://artifactory.infra.corp.arista.io/artifactory}
        sources: []
        build: |
          cd /var/work
          # First argument is collaterals dir, further args are pem files
          bash /bootstrap/eext-repos/generate.bash /bootstrap/eext-repos /pki/rpmkeys/alma9-b86b3716-gpg-pubkey.pem /pki/rpmkeys/epel9-3228467c-gpg-pubkey.pem

  internal/bootstrap/install-rpms/sources/common:
    no-create-mountpoints: true
    description: |
      install-rpms script and common rpms list
    units:
      - files:
          - from: .
            paths:
              - 'bootstrap/install-rpms/install-rpms.bash'
              - 'bootstrap/install-rpms/rpms-common'

  internal/bootstrap/install-rpms/sources/build:
    no-create-mountpoints: true
    description: |
      build specific rpms list
    units:
      - files:
          - from: .
            paths:
              - 'bootstrap/install-rpms/rpms-build'

  internal/bootstrap/install-rpms/sources/devel:
    no-create-mountpoints: true
    description: |
      devel/test specific rpms list
    units:
      - files:
          - from: .
            paths:
              - 'bootstrap/install-rpms/rpms-devel'

  internal/bootstrap/dnf-dirs:
    no-create-mountpoints: true
    description: |
      Setup empty directories needed by dnf
    units:
      - sources: []
        build: |
          mkdir -p /dest/var/lib/dnf
          chmod 755 /dest/var/lib/dnf

  internal/bootstrap-build:
    description: |
      Final bootstrap layer used as floor for build images
    units:
      - image: .%internal/bootstrap/dnf-dirs
      - image: .%internal/bootstrap/extract
      - image: .%internal/bootstrap/eext-repos
      - image: .%internal/bootstrap/install-rpms/sources/common
      - image: .%internal/bootstrap/install-rpms/sources/build

  internal/bootstrap-devel:
    description: |
      Final bootstrap layer used as floor for devel images
    units:
      - image: .%internal/bootstrap/dnf-dirs
      - image: .%internal/bootstrap/extract
      - image: .%internal/bootstrap/eext-repos
      - image: .%internal/bootstrap/install-rpms/sources/common
      - image: .%internal/bootstrap/install-rpms/sources/devel

  base-image-build:
    units:
      - floor: .%internal/bootstrap-build
        sources: []
        build: |
          echo "install rpms"
          bash /bootstrap/install-rpms/install-rpms.bash \
            --common-rpms-file /bootstrap/install-rpms/rpms-common \
            --extra-rpms-file /bootstrap/install-rpms/rpms-build

  base-image-devel:
    units:
      - floor: .%internal/bootstrap-devel
        sources: []
        build: |
          bash /bootstrap/install-rpms/install-rpms.bash \
            --common-rpms-file /bootstrap/install-rpms/rpms-common \
            --extra-rpms-file /bootstrap/install-rpms/rpms-devel

  go-buildfloor:
    description: |
      Build floor for the eext go binary.
      This buildfloor is used to manually run go build instead of using
      the go generator to avoid adding the repo commit hash into the
      snapshot hash.

      TODO: We cannot use .%go/modules here as one of the image units
      because that also maps in all the sources to run go mod tidy.
      As a workaround, we're turning on the network and foregoing any
      benefits from the go generator's cache.
    units:
      - image: barney.ci/golang%dev
      - image: barney.ci/alpine%network
    entry:
      mutables:
        - /go/pkg/mod

  go-sources:
    description: |
      Image with source files need to build the eext static binary.
    units:
      - files:
          - from: .
            match:
              - 'go.mod'
              - 'go.sum'
              - 'main.go'
              - 'cmd/*.go'
              - 'dnfconfig/*.go'
              - 'impl/*.go'
              - 'manifest/*.go'
              - 'srcconfig/*.go'
              - 'util/*.go'

  go-binaries:
    description: |
      We avoid using the go generator directly for two reasons:
      1. We want redhat style directory permissions of 0555
      2. We want to present a filtered view of sources, mapping in only
         the go sources. This makes sure we use a content hash of the go sources
         and not the SHA of the repo to generate the snapshot hash of .%go-binaries.
    units:
      - sources: []
        mappings:
          /src: .%go-sources
        floor: .%go-buildfloor
        build: |
          mkdir -p /dest/usr/bin
          chmod 0555 /dest/usr/bin
          cd /src
          CGO_ENABLED=0 go build -o /dest/usr/bin -ldflags '-extldflags "-static"' ./...

  src/configfiles:
    description: |
      Configuration files for eext
    units:
      - files:
          - from: .
            match:
              - 'configfiles/*'

  src/pki:
    description: |
      pki files for eext
    units:
      - files:
          - from: .
            match:
              - 'pki/**/*'
              - 'pki/**/**/*'

  eext-staticfiles:
    no-create-mountpoints: true
    units:
      - mappings:
          /src/1: .%src/configfiles
          /src/2: .%src/pki
        sources: []
        build: |
          mkdir -p $DESTDIR/usr/share/eext
          cp /src/1/configfiles/* $DESTDIR/usr/share/eext
          mkdir -p $DESTDIR/etc/pki/eext
          cp -a /src/2/pki/* $DESTDIR/etc/pki/eext

  eext:
    units:
      - image: .%base-image-build
      - image: .%go-binaries
      - image: .%eext-staticfiles
      - sources: []
        build: |
          mkdir -p $DESTDIR/etc
          touch $DESTDIR/etc/resolv.conf

    entry:
      mutables: &eext-mutables
        - /var/eext
        - /var/cache
        - /var/lib/mock
        - /var/lib/rpm
        - /var/tmp
      mounts:
        - source: /etc/resolv.conf
          target: /etc/resolv.conf
          options: ro,bind
      # We need access to artifactory.infra.corp.arista.io
      # to make mock work
      share-net: true

  eext-testfloor:
    units:
      - image: .%go/modules
      - build: |
          mkdir -p /dest/var/cache/go
          mkdir -p /dest/var/ext
      - floor: .%internal/bootstrap-devel
        sources: []
        build: |
          bash /bootstrap/install-rpms/install-rpms.bash \
            --common-rpms-file /bootstrap/install-rpms/rpms-common \
            --extra-rpms-file /bootstrap/install-rpms/rpms-devel
          touch $DESTDIR/etc/resolv.conf

    entry:
      env:
        GOCACHE: /tmp/gocache
        GOMODCACHE: /go/pkg/mod
      mutables: *eext-mutables
      mounts:
        - source: /etc/resolv.conf
          target: /etc/resolv.conf
          options: ro,bind
      # We need access to artifactory.infra.corp.arista.io
      # to make mock work
      share-net: true

  test/eext:
    units:
      - floor: .%eext-testfloor
        build: |
          go test code.arista.io/eos/tools/eext/dnfconfig
          go test code.arista.io/eos/tools/eext/srcconfig
          go test code.arista.io/eos/tools/eext/manifest
          go test code.arista.io/eos/tools/eext/impl
          go test code.arista.io/eos/tools/eext/cmd -tags privileged
          go vet code.arista.io/eos/tools/eext/...
          test -z "$(gofmt -l .)"

  # go test runs on separate test-floor
  # so validate build here
  test/eext-build:
    units:
      - image: .%eext
